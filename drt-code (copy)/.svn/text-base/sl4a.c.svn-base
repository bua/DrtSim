#include "tsu.h"
#include<stdlib.h>
#include<stdio.h>

/*
  PURPOSE: SUBSTITUTE WITH TWRITE_AL and TWREAD_AL
  OUTPUT:
  start
  1,2,5,8,4,3,2,8,5,2,1,Sum of all the elements in the final list is 41.
*/

#define malloc(x)	df_talloc(0,x)
#define free(x)		df_tfree(x)

#define BAS(X)		((void *)(&(*(X))))
#define OFF(X,Y)	((long) &(((typeof(X))0)->Y))
#define TYP(X,Y)	typeof(((typeof(X))0)->Y)
#define W(X,Y,Z)	(df_twrite_al((uint64_t)((TYP(X,Y) *)((void *)(BAS(X)+OFF(X,Y)))),(uint64_t)(Z)))
#define R(X,Y)		((TYP(X,Y))(df_tread_al((uint64_t)((TYP(X,Y) *)((void *)(BAS(X)+OFF(X,Y)))))))

extern uint64_t df_ts0[100],df_ts1[100]; // timestamp buffers
extern uint64_t df_tt;


struct list_el {
   uint64_t val;
   struct list_el * next; 
}; 

typedef struct list_el item;

item *head;

void addItemToTheHead();
void removeItemFromTheHead();
void removeItemFromTheTail();
void addItemToTheTail();
void addRemoveItems();
void main1();
void exit1();

/*
NOTES:
- solved bug in UNIMAN code: last 3 functions did not set 'iterations' from df_read(0)
- TSU4 uses uint64_t -- do not use 'int'
*/
int main() {
   printf("start \n");
   df_tt = df_tstamp(df_ts0);

   uint64_t m1 = df_tschedule(&main1,1);
   uint64_t x1 = df_tschedule(&exit1,1);
   df_write(m1,0,x1);

   df_destroy();
   return(0);
}

void main1() {
   item *curr; head = NULL; int i;
   df_ldframe(1);
   uint64_t x1 = df_read(0);

   for(i=1;i<=5;i++) {
      curr = (item *)malloc(sizeof(item));
      W(curr,val, i);
      W(curr,next, head);
      head = curr;
   }

   uint64_t addRem  = df_tschedule(&addRemoveItems,2);
   df_write(addRem,0,10);   
   df_write(addRem,1,x1);   
   df_destroy();
}

void exit1() {
   printf("Goodbye.\n");
   fflush(stdout);
   df_destroy();
   df_exit();
}

void addRemoveItems(){   
   df_ldframe(2);
   uint64_t iterations = df_read(0);
   uint64_t x1 = df_read(1);
   iterations--;

   if(iterations>0){ 
	  if(iterations%3){
             uint64_t add = df_tschedule(&addItemToTheHead,2);
	     df_write(add,0,iterations);
             df_write(add,1,x1);   
	     df_destroy();  
          }
	  else{
             uint64_t rem = df_tschedule(&removeItemFromTheHead,2);
	     df_write(rem,0,iterations);
             df_write(rem,1,x1);   
	     df_destroy();  
          }     
   }
   else{
       uint64_t tmp=0;
       item* curr = head;
       while(curr){
           printf("%lu,",R(curr,val));    	   
           tmp+=R(curr,val);
           curr =R(curr,next);	   
       }
       printf("Sum of all the elements in the final list is %ld. \n",tmp);
       fflush(stdout);
       df_write(x1,0,0);   
       df_destroy();
//sleep(5);
//       df_exit();
   }
}

void removeItemFromTheHead(){
   df_ldframe(2);
//   uint64_t i = R(head,val);
   if(R(head,next)){   //atleast 2 elements in the list
      item* curr = head;      
      curr =R(head,next);
      free((uint64_t)head);
      head = curr;
   }

   uint64_t remove  = df_tschedule(&removeItemFromTheTail,2);
   df_write(remove,0,df_read(0));
   df_write(remove,1,df_read(1));   
   df_destroy();
}

void removeItemFromTheTail(){
   df_ldframe(2);
   uint64_t iterations = df_read(0);
   item* curr = head;
   while(R(R(curr,next),next)) curr = R(curr,next);

   free((uint64_t)R(curr,next));
   W(curr,next, NULL);

   uint64_t addRem  = df_tschedule(&addRemoveItems,2);
   df_write(addRem,0, iterations);
   df_write(addRem,1,df_read(1));   
   df_destroy();
}

void addItemToTheHead(){
   df_ldframe(2);
   uint64_t iterations = df_read(0);
   item* curr = (item *)malloc(sizeof(item));
   W(curr,val, iterations);
   W(curr,next, head);
   head = curr;

   uint64_t add = df_tschedule(&addItemToTheTail,2);
   df_write(add,0,iterations);
   df_write(add,1,df_read(1));   
   df_destroy();
}

void addItemToTheTail(){
   df_ldframe(2);
   uint64_t iterations = df_read(0);
   item* curr = head;
   while(R(curr,next)) curr = R(curr,next);

   W(curr,next, (item *)malloc(sizeof(item)));
   curr = R(curr,next);
   W(curr,val, iterations);
   W(curr,next, NULL);

   uint64_t addRem = df_tschedule(&addRemoveItems,2);
   df_write(addRem,0,iterations);
   df_write(addRem,1,df_read(1));   
   df_destroy();
}

