/* VERSION 3.0.0 */
/* THIS CODE IS AUTOMATICALLY GENERATED BY THE S2 TOOL */
#define TSU_PRELOAD_FRAME
#include "tsu.h"
#include <stdio.h>

extern uint64_t df_ts0[100],df_ts1[100];
extern uint64_t df_tt;

int main();
void grow(void);
void main_1(void);
void grow_1(void);
void grow_5(void);
void tree_sum(void);
void main_2(void);
void grow_2(void);
void grow_4(void);
void tree_sum_1(void);
void tree_sum_5(void);
void main_3(void);
void exit1(void);
void grow_3(void);
void tree_sum_2(void);
void tree_sum_4(void);
void tree_sum_3(void);

int _V5
[] = { 37,
100,
10,
0,
};
int next
[] = { 1, 
};
int _rand48_seed
[] = { 13070,
43981,
4660,
};
int _rand48_mult
[] = { 58989,
57068,
5,
};
int _rand48_add
[] = { 11, 
};
int sseed_v101
[6] = { 0, 
};

int main()
{
	df_tt = df_tstamp(df_ts0);
	uint64_t R7 = 0;
	uint64_t R3 = (uint64_t)grow;
	uint64_t R5 = df_tschedule_cond((void *)R3, 2, 1);
	uint64_t R4 = (uint64_t)10;
	uint64_t R6 = (uint64_t)main_1;
	uint64_t R2 = df_tschedule_cond((void *)R6, 3, 1);
	df_write(R2,5, R4);
	df_write(R2,2, R7);
	df_write(R5,2, R2);
	df_write(R5,5, R4);
	df_destroy();
	return 0;
}

void grow()
{
	df_ldframe();
	uint64_t R6 = df_frame(5);
	uint64_t R8 = df_frame(2);
	uint64_t R2 = (uint64_t)12;
	uint64_t R3 = df_talloc(0, R2);
	uint64_t R7 = R3;
	R2 = ((int64_t)R6 == (int64_t)0);
	uint64_t R9 = R2;
	uint64_t R5 = (uint64_t)0;
	uint64_t R4 = (uint64_t)grow_5;
	R5 = df_tschedule_cond((void *)R4, 3, R9);
	R9 = ! R9;
	R4 = (uint64_t)grow_1;
	R5 |= df_tschedule_cond((void *)R4, 3, R9);
	df_write(R5,5, R6);
	df_write(R5,6, R7);
	df_write(R5,2, R8);
	df_destroy();
}

void main_1()
{
	df_ldframe();
	uint64_t R6 = df_frame(5);
	R6 = df_frame(4);
	uint64_t R7 = df_frame(2);
	uint64_t R3 = (uint64_t)tree_sum;
	uint64_t R4 = df_tschedule_cond((void *)R3, 2, 1);
	uint64_t R5 = (uint64_t)main_2;
	uint64_t R2 = df_tschedule_cond((void *)R5, 3, 1);
	df_write(R2,5, R6);
	df_write(R2,2, R7);
	df_write(R4,2, R2);
	df_write(R4,5, R6);
	df_destroy();
}

void grow_1()
{
	df_ldframe();
	uint64_t R6 = df_frame(5);
	uint64_t R3 = df_frame(6);
	uint64_t R9 = df_frame(2);
	uint64_t R1 = (uint64_t)4;
	uint64_t R4 = R3 + R1;
	uint64_t R2 = (uint64_t)1;
	df_twrite_al(R4 + 0, R2);
	R2 = (uint64_t)1;
	uint64_t R7 = R6 - R2;
	uint64_t R5 = R7;
	R4 = (uint64_t)grow;
	R6 = df_tschedule_cond((void *)R4, 2, 1);
	uint64_t R8 = (uint64_t)grow_2;
	R2 = df_tschedule_cond((void *)R8, 5, 1);
	df_write(R2,5, R3);
	df_write(R2,6, R5);
	df_write(R2,7, R7);
	df_write(R2,2, R9);
	df_write(R6,2, R2);
	df_write(R6,5, R5);
	df_destroy();
}

void grow_5()
{
	df_ldframe();
	uint64_t R3 = df_frame(6);
	uint64_t R6 = df_frame(2);
	uint64_t R1 = (uint64_t)4;
	uint64_t R2 = R3 + R1;
	df_twrite_al(R2 + 0, 0);
	uint64_t R5 = (uint64_t)grow_4;
	R2 = df_tschedule_cond((void *)R5, 2, 1);
	df_write(R2,5, R3);
	df_write(R2,2, R6);
	df_destroy();
}

void tree_sum()
{
	df_ldframe();
	uint64_t R4 = df_frame(5);
	uint64_t R7 = df_frame(2);
	uint64_t R3 = df_tread_al(R4 + 4);
	uint64_t R2 = ((int64_t)R3 == (int64_t)0);
	uint64_t R8 = R2;
	uint64_t R6 = (uint64_t)0;
	R3 = (uint64_t)tree_sum_5;
	R6 = df_tschedule_cond((void *)R3, 2, R8);
	R8 = ! R8;
	R3 = (uint64_t)tree_sum_1;
	R6 |= df_tschedule_cond((void *)R3, 2, R8);
	df_write(R6,5, R4);
	df_write(R6,2, R7);
	df_destroy();
}

void main_2()
{
	df_ldframe();
	uint64_t R2 = df_frame(5);
	R2 = df_frame(4);
	uint64_t R6 = df_frame(2);
	printf("%ld", R2);
	uint64_t R1 = (uint64_t)10;
	putchar(R1);
	uint64_t R3 = (uint64_t)exit1;
	uint64_t R4 = df_tschedule_cond((void *)R3, 2, 1);
	uint64_t R5 = (uint64_t)main_3;
	R2 = df_tschedule_cond((void *)R5, 2, 1);
	df_write(R2,2, R6);
	df_write(R4,2, R2);
	df_write(R4,5, 0);
	df_destroy();
}

void grow_2()
{
	df_ldframe();
	uint64_t R3 = df_frame(5);
	uint64_t R2 = df_frame(6);
	uint64_t R5 = df_frame(7);
	R2 = df_frame(4);
	uint64_t R8 = df_frame(2);
	df_twrite_al(R3 + 0, R2);
	uint64_t R4 = (uint64_t)grow;
	uint64_t R6 = df_tschedule_cond((void *)R4, 2, 1);
	uint64_t R7 = (uint64_t)grow_3;
	R2 = df_tschedule_cond((void *)R7, 4, 1);
	df_write(R2,5, R3);
	df_write(R2,6, R5);
	df_write(R2,2, R8);
	df_write(R6,2, R2);
	df_write(R6,5, R5);
	df_destroy();
}

void grow_4()
{
	df_ldframe();
	uint64_t R3 = df_frame(5);
	uint64_t R2 = df_frame(2);
	df_write(R2,4, R3);
	df_destroy();
}

void tree_sum_1()
{
	df_ldframe();
	uint64_t R4 = df_frame(5);
	uint64_t R8 = df_frame(2);
	uint64_t R3 = (uint64_t)tree_sum;
	uint64_t R7 = df_tschedule_cond((void *)R3, 2, 1);
	uint64_t R5 = df_tread_al(R4 + 0);
	uint64_t R6 = (uint64_t)tree_sum_2;
	uint64_t R2 = df_tschedule_cond((void *)R6, 4, 1);
	df_write(R2,5, R4);
	df_write(R2,6, R5);
	df_write(R2,2, R8);
	df_write(R7,2, R2);
	df_write(R7,5, R5);
	df_destroy();
}

void tree_sum_5()
{
	df_ldframe();
	uint64_t R6 = df_frame(2);
	uint64_t R5 = (uint64_t)1;
	uint64_t R4 = (uint64_t)tree_sum_4;
	uint64_t R2 = df_tschedule_cond((void *)R4, 2, 1);
	df_write(R2,5, R5);
	df_write(R2,2, R6);
	df_destroy();
}

void main_3()
{
	df_ldframe();
	uint64_t R2 = df_frame(4);
	R2 = df_frame(2);
	df_write(R2,4, 0);
	df_destroy();
}

void exit1()
{
	df_ldframe();
	df_destroy();
	df_exit();
}

void grow_3()
{
	df_ldframe();
	uint64_t R3 = df_frame(5);
	uint64_t R4 = df_frame(6);
	R4 = df_frame(4);
	uint64_t R6 = df_frame(2);
	uint64_t R1 = (uint64_t)8;
	uint64_t R2 = R3 + R1;
	df_twrite_al(R2 + 0, R4);
	uint64_t R5 = (uint64_t)grow_4;
	R2 = df_tschedule_cond((void *)R5, 2, 1);
	df_write(R2,5, R3);
	df_write(R2,2, R6);
	df_destroy();
}

void tree_sum_2()
{
	df_ldframe();
	uint64_t R4 = df_frame(5);
	uint64_t R7 = df_frame(6);
	R7 = df_frame(4);
	uint64_t R8 = df_frame(2);
	uint64_t R3 = (uint64_t)tree_sum;
	uint64_t R6 = df_tschedule_cond((void *)R3, 2, 1);
	uint64_t R5 = df_tread_al(R4 + 8);
	R4 = (uint64_t)tree_sum_3;
	uint64_t R2 = df_tschedule_cond((void *)R4, 4, 1);
	df_write(R2,5, R7);
	df_write(R2,6, R5);
	df_write(R2,2, R8);
	df_write(R6,2, R2);
	df_write(R6,5, R5);
	df_destroy();
}

void tree_sum_4()
{
	df_ldframe();
	uint64_t R3 = df_frame(5);
	uint64_t R2 = df_frame(2);
	df_write(R2,4, R3);
	df_destroy();
}

void tree_sum_3()
{
	df_ldframe();
	uint64_t R7 = df_frame(5);
	uint64_t R2 = df_frame(6);
	R2 = df_frame(4);
	uint64_t R6 = df_frame(2);
	uint64_t R5 = R7 + R2;
	uint64_t R4 = (uint64_t)tree_sum_4;
	R2 = df_tschedule_cond((void *)R4, 2, 1);
	df_write(R2,5, R5);
	df_write(R2,2, R6);
	df_destroy();
}

